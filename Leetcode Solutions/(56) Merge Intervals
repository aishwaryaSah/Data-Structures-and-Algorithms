/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    
    struct less_than_key
    {
        inline bool operator() (const Interval& struct1, const Interval& struct2)
        {
            return (struct1.start < struct2.start);
        }
    };
    vector<Interval> merge(vector<Interval>& inter) 
    {
        int i, n=inter.size();
        sort(inter.begin(),inter.end(),less_than_key());
        for(i=1; i<n; i++)
        {
            if(inter[i].start<=inter[i-1].end)
            {
                if(inter[i].end>inter[i-1].end)
                    inter[i-1].end=inter[i].end;
                n--;
                inter.erase(inter.begin()+i);
                i--;
            }
        }
        return inter;
    }
};
/**
The const keyword at the end of the signature specifies that the operator() function does not change the instance of the Xgreater struct (which in general could have member variables), whereas indicating const for the input values only specifies that those input values are immutable
*/
