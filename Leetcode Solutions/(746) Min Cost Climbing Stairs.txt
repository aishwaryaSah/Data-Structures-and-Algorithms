1.
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int>dp(cost.size(),0);
        for(int i=0; i<cost.size(); i++)
        {
            if(i==0)
                dp[i]=cost[i];
            else if(i==1)
                dp[i]=min(dp[i-1]+cost[i],cost[i]);
            else
                dp[i]=min(dp[i-1]+cost[i],dp[i-2]+cost[i]);
        }
        return min(dp[cost.size()-1],dp[cost.size()-2]);
    }
};

2.
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) 
    {
        int l,i;
        l=cost.size();
        int k[l]={0};
        for(i=0; i<l; i++)
        {
            if(i==0)
            {
                k[i]=cost[i];
            }
            else
            {
                if((i-2)>=0)
                {
                    if((cost[i]+k[i-2])<((k[i-1]+cost[i])))
                        k[i]=cost[i]+k[i-2];
                    else
                        k[i]=cost[i]+k[i-1];
                }
                else
                {
                    if(cost[i]<(k[i-1]+cost[i]))
                    {
                        k[i]=cost[i];
                    }
                    else
                    {
                        k[i]=cost[i-1]+cost[i];
                    }
                }
            }
        }
        return min(k[l-1],k[l-2]);
    }
};
