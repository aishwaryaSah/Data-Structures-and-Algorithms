/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
        ListNode* reverseList(ListNode* head) 
    {
        if((head==NULL)||(head->next==NULL))
            return head;
        ListNode* ptr=head;
        ListNode* tmp=head;
        ListNode* pre=head;
        ptr=ptr->next;
        while(ptr!=NULL)
        {
            tmp=ptr->next;
            ptr->next=pre;
            pre=ptr;
            ptr=tmp;
        }
        head->next=NULL;
        return pre;
    }

    bool isPalindrome(ListNode* head) 
    {
        if(head==NULL)
            return true;
        ListNode* ptr1=head;
        ListNode* ptr2=head;
        while((ptr2!=NULL)&&(ptr2->next!=NULL))
        {
            ptr1=ptr1->next;
            ptr2=ptr2->next->next;
        }
        if(ptr2!=NULL && ptr2->next==NULL)
        {
            ptr1=ptr1->next;
        }
        ptr2=head;
        ptr1=reverseList(ptr1);
        while(ptr1!=NULL && ptr2!=NULL)
        {
            if(ptr1->val!= ptr2->val)
                return false;
            ptr1=ptr1->next;
            ptr2=ptr2->next;
        }
        return true;
    }
};