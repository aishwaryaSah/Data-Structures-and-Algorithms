class Solution {
public:
    
    struct node
    {
        int x,y;
    };
    
    int numIslands(vector<vector<char>>& grid) 
    {
        int r,c,i,j,cc=0;
        r=grid.size();
        if(r==0)
            return 0;
        c=grid[0].size();
        if(c==0)
            return 0;
        node d,f;
        queue<node>q;
        for(i=0; i<r; i++)
        {
            for(j=0; j<c; j++)
            {
                if(grid[i][j]=='1')
                {
                    cc++;
                    d.x=i;
                    d.y=j;
                    grid[i][j]=0;
                    q.push(d);
                    while(!q.empty())
                    {
                        d=q.front();
                        q.pop();
                        if(((d.x-1)>=0)&&(grid[d.x-1][d.y]=='1'))
                        {
                            f.x=d.x-1;
                            f.y=d.y;
                            q.push(f);
                            grid[d.x-1][d.y]=0;
                        }
                        if(((d.x+1)<r)&&(grid[d.x+1][d.y]=='1'))
                        {
                            f.x=d.x+1;
                            f.y=d.y;
                            q.push(f);
                            grid[d.x+1][d.y]=0;
                        }
                        if(((d.y-1)>=0)&&(grid[d.x][d.y-1]=='1'))
                        {
                            f.x=d.x;
                            f.y=d.y-1;
                            q.push(f);
                            grid[d.x][d.y-1]=0;
                        }
                        if(((d.y+1)<c)&&(grid[d.x][d.y+1]=='1'))
                        {
                            f.x=d.x;
                            f.y=d.y+1;
                            q.push(f);
                            grid[d.x][d.y+1]=0;
                        }
                    }
                }
            }
        }
        return cc;
    }
};