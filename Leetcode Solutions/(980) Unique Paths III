class Solution {
public:
    
    int ans=0;
    
    bool inRange(vector<vector<int>>& grid , int i, int j)
    {
        int n=grid.size();
        int m=grid[0].size();
        if(i>=0 && i<n && j>=0 && j<m)
            return true;
        return false;
    }
    
    bool allEmptyCovered(vector<vector<int>>visited, vector<vector<int>>grid)
    {
        int i,j;
        int n=visited.size();
        int m=visited[0].size();
        for(i=0; i<n; i++)
        {
            for(j=0; j<m; j++)
            {
                if(visited[i][j]==0 && grid[i][j]!=-1)
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    void calc(vector<vector<int>>&visited,vector<vector<int>>& grid , int i, int j, int desx, int desy)
    {
        if(i==desx && j==desy)
        {
            visited[i][j]=3;
            if(allEmptyCovered(visited,grid))
                ans++;
            visited[i][j]=0;
            return;
        }
        if(visited[i][j]!=0)
        {
            return;
        }
        else
        {
            visited[i][j]=3;
            if(inRange(grid, i+1, j) && grid[i+1][j]!=-1 && visited[i+1][j]==0)
                calc(visited, grid, i+1,j,desx,desy);
            if(inRange(grid, i-1, j) && grid[i-1][j]!=-1 && visited[i-1][j]==0)
                calc(visited, grid, i-1,j,desx,desy);
            if(inRange(grid, i, j+1) && grid[i][j+1]!=-1 && visited[i][j+1]==0)
                calc(visited, grid, i,j+1,desx,desy);
            if(inRange(grid, i, j-1) && grid[i][j-1]!=-1 && visited[i][j-1]==0)
                calc(visited, grid, i,j-1,desx,desy);
            visited[i][j]=0;
        }
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int stx,sty,desx,desy;
        int i,j;
        for(i=0; i<n; i++)
        {
            for(j=0; j<m ; j++)
            {
                if(grid[i][j]==1)
                {
                    stx=i;
                    sty=j;
                }
                if(grid[i][j]==2)
                {
                    desx=i;
                    desy=j;
                }
            }
        }
        vector<vector<int> >visited(n, vector<int>(m,0));
        calc(visited,grid,stx,sty,desx,desy);
        return ans;
    }
};
